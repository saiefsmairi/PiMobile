package com.mycompany.myapp.test;


import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import Forms.AjoutVoyage;
import Forms.ChartDemosForm;
import Forms.Home;
import Forms.Inscription;
import Forms.ListeReservationClient;
import Forms.ListeVoyage;
import Forms.ListeVoyageFront;
import Forms.Login;
import Forms.ReservationVoyage;

import com.codename1.db.Database;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.util.Resources;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    public static Resources theme;
    public static Database db;

    public void init(Object context) {
    	
    	try {
			db=Database.openOrCreate("db1");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	try {
			
			db.execute("CREATE TABLE IF NOT EXISTS user (id integer primary key AUTOINCREMENT , nom text , prenom text , pass text)");
			db.execute("CREATE TABLE IF NOT EXISTS voiture (id integer primary key AUTOINCREMENT , marque text , modele text , image text, prix integer)");
		} catch (IOException e) { 
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){ 
            current.show();
            return;
        }

      //  ChartDemosForm demos = new ChartDemosForm();
     //   current = demos;
     //  demos.show();   
        ListeReservationClient h=new ListeReservationClient (current);
       h.show();
        
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
